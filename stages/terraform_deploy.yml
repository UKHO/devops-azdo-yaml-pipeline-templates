# Terraform Deploy Stage Template
#
# Purpose: Deploys Terraform infrastructure using downloaded artifacts with Azure backend configuration
# Features: Full deployment workflow with init and apply commands, Azure-specific backend configuration
#
parameters:
  # Generic parameters
  - name: DependsOn
    type: object
    default: [ ]
    displayName: 'What this stage will depend on'

  - name: Condition
    type: string
    default: succeeded()
    displayName: 'The condition that will control whether this stage runs or not'

  - name: AzureSubscriptionServiceConnection
    type: string
    displayName: 'The service connection for the azure subscription where resources will be deployed too'

  - name: AzDOEnvironmentName
    type: string
    displayName: 'The azure devops environment that the deployment jobs will be associated with'

  - name: TerraformArtifactName
    type: string
    default: 'TerraformArtifact'
    displayName: 'Name for the artifact containing the terraform files for deployment'

  - name: TerraformJobVariableMappings
    type: object
    default: { }
    displayName: ''

  # terraform init task parameters
  - name: BackendAzureServiceConnection
    type: string
    default: ''
    displayName: 'Azure service connection for backend where the state is stored'

  - name: BackendAzureStorageAccountName
    type: string
    default: ''
    displayName: 'Azure storage account name for backend where the state is stored'

  - name: BackendAzureContainerName
    type: string
    default: ''
    displayName: 'Azure storage container name for backend where the state is stored'

  - name: BackendAzureBlobName
    type: string
    default: ''
    displayName: 'Azure storage blob name for backend where the state is stored'

  - name: BackendAzureStorageAccountResourceGroupName
    type: string
    default: ''
    displayName: 'Azure resource group name for backend where the state is stored'

  # Key Vault Parameters
  - name: KeyVaultServiceConnection
    type: string
    default: ''
    displayName: 'Service connection for key vault access secrets'

  - name: KeyVaultName
    type: string
    default: ''
    displayName: 'Name of key vault for accessing secrets'

  - name: KeyVaultSecretsFilter
    type: string
    default: '*'
    displayName: 'Filter for secrets to access from key vault'

  - name: RunPlanOnly
    type: boolean
    default: false
    displayName: 'Whether only the terraform plan should be ran and no deployment made'

  - name: VerificationMode
    type: string
    default: VerifyOnDestroy
    displayName: 'How verification step should trigger: verify on destruction changes; verify on any changes; or do not verify at all'
    values:
      - VerifyOnDestroy
      - VerifyOnAny
      - VerifyDisabled

  - name: TerraformVariableMappings
    type: object
    default: { }
    displayName: ''

  - name: TerraformOutputVariables
    type: object
    default: { }
    displayName: ''

  - name: TerraformVariableFiles
    type: object
    default: { }
    displayName: ''

stages:
  - stage: Deploy
    displayName: 'Terraform Deploy'
    condition: ${{ parameters.Condition }}
    dependsOn: ${{ parameters.DependsOn }}
    variables:
      TerraformPlanJobName: TerraformPlan
      ManualVerificationJobName: ManualVerification
      TerraformApplyJobName: TerraformApply
      TerraformVariableFilesCommandArgumentFragment: >-
        ${{ join(variables.TFVarFiles, "' -var-file='") }}
      TerraformVariableFilesCommandArgument: "-var-file='${{ variables.TerraformVariableFilesCommandArgumentFragment }}'"

    jobs:
      - template: ../jobs/terraform_plan.yml
        parameters:
          # generic parameters
          JobName: ${{ variables.TerraformPlanJobName }}
          JobVariableMappings: ${{ parameters.TerraformJobVariableMappings }}
          TerraformArtifactName: ${{ parameters.TerraformArtifactName }}
          AzDOEnvironmentName: ${{ parameters.AzDOEnvironmentName }}
          # key vault task parameters
          KeyVaultServiceConnection: ${{ parameters.KeyVaultServiceConnection }}
          KeyVaultName: ${{ parameters.KeyVaultName }}
          KeyVaultSecretsFilter: ${{ parameters.KeyVaultSecretsFilter }}
          # terraform installer task parameters
          TerraformVersion: ${{ parameters.TerraformVersion }}
          # terraform init task parameters
          BackendAzureServiceConnection: ${{ parameters.BackendAzureServiceConnection }}
          BackendAzureStorageAccountResourceGroupName: ${{ parameters.BackendAzureStorageAccountResourceGroupName }}
          BackendAzureStorageAccountName: ${{ parameters.BackendAzureStorageAccountName }}
          BackendAzureContainerName: ${{ parameters.BackendAzureContainerName }}
          BackendAzureBlobName: ${{ parameters.BackendAzureBlobName }}
          # terraform plan task parameters
          AzureSubscriptionServiceConnection: ${{ parameters.AzureSubscriptionServiceConnection }}
          #TerraformEnvironmentVariableMappings: ${{ parameters.TerraformEnvironmentVariableMappings }} # missing
          #TerraformVariableFiles: ${{ parameters.TerraformVariableFiles }} # missing
          #VerificationMode: ${{ parameters.VerificationMode }} # missing

      - ${{ if ne(parameters.RunPlanOnly, 'PlanOnly') }}:
          - template: ../jobs/manual_verification.yml
            parameters:
              JobName: ${{ variables.ManualVerificationJobName }}
              DependsOn: ${{ variables.TerraformPlanJobName }}
              Condition: and(succeeded(), eq(dependencies.${{ variables.ManualVerificationJobName }}.outputs['${{ variables.ManualVerificationJobName }}.plan.needsManualVerification'], 'true'))

          - template: ../jobs/terraform_apply.yml
            parameters:
              # generic Parameters
              JobName: ${{ variables.TerraformApplyJobName }}
              DependsOn:
                - ${{ variables.ManualVerificationJobName }}
                - ${{ variables.TerraformPlanJobName }}
              Condition: or(succeeded(${{ variables.ManualVerificationJobName }}), and(succeeded(${{ variables.TerraformPlanJobName }}), eq(dependencies.${{ variables.TerraformPlanJobName }}.outputs['${{ variables.TerraformPlanJobName }}.plan.runApply'], 'true'), eq(dependencies.${{ variables.TerraformPlanJobName }}.outputs['${{ variables.TerraformPlanJobName }}.plan.needsManualVerification'], 'false')))
              JobVariableMappings: ${{ parameters.TerraformJobVariableMappings }}
              TerraformArtifactName: ${{ parameters.TerraformArtifactName }}
              AzDOEnvironmentName: ${{ parameters.AzDOEnvironmentName }}
              # key vault task parameters
              KeyVaultServiceConnection: ${{ parameters.KeyVaultServiceConnection }}
              KeyVaultName: ${{ parameters.KeyVaultName }}
              KeyVaultSecretsFilter: ${{ parameters.KeyVaultSecretsFilter }}
              # terraform init task parameters
              BackendAzureServiceConnection: ${{ parameters.BackendAzureServiceConnection }}
              BackendAzureStorageAccountResourceGroupName: ${{ parameters.BackendAzureStorageAccountResourceGroupName }}
              BackendAzureStorageAccountName: ${{ parameters.BackendAzureStorageAccountName }}
              BackendAzureContainerName: ${{ parameters.BackendAzureContainerName }}
              BackendAzureBlobName: ${{ parameters.BackendAzureBlobName }}
              # terraform plan task parameters
              AzureSubscriptionServiceConnection: ${{ parameters.AzureSubscriptionServiceConnection }}
              #TerraformOutputVariables: ${{ parameters.TerraformOutputVariables }}
              #TerraformEnvironmentVariableMappings: ${{ parameters.TerraformEnvironmentVariableMappings }} # missing
              #TerraformVariableFiles: ${{ parameters.TerraformVariableFiles }} # missing

