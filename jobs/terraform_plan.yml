parameters:
  # generic parameters

  - name: JobName
    type: string
    default: TerraformPlan
    displayName: 'The job name for this job for ease of identity'

  - name: JobVariableMappings
    type: object
    default: { }
    displayName: "A object structure of variables to be added to the job's variables block"

  - name: TerraformArtifactName
    type: string
    default: 'TerraformArtifact'
    displayName: 'Name for the artifact containing the terraform files for deployment'

  - name: AzDOEnvironmentName
    type: string
    displayName: 'The azure devops environment that this deployment job will be associated with'

  # key vault task parameters

  - name: KeyVaultServiceConnection
    type: string
    default: ''
    displayName: 'Service connection for key vault access secrets'

  - name: KeyVaultName
    type: string
    default: ''
    displayName: 'Name of key vault for accessing secrets'

  - name: KeyVaultSecretsFilter
    type: string
    default: '*'
    displayName: 'Filter for secrets to access from key vault'

  # terraform installer task parameters

  - name: TerraformVersion
    type: string
    default: 'latest'
    displayName: 'Version of Terraform CLI tool to use with the terraform files'

  # terraform init task parameters

  - name: BackendAzureServiceConnection
    type: string
    default: ''
    displayName: 'Azure service connection for backend where the state is stored'

  - name: BackendAzureStorageAccountName
    type: string
    default: ''
    displayName: 'Azure storage account name for backend where the state is stored'

  - name: BackendAzureContainerName
    type: string
    default: ''
    displayName: 'Azure storage container name for backend where the state is stored'

  - name: BackendAzureBlobName
    type: string
    default: ''
    displayName: 'Azure storage blob name for backend where the state is stored'

  - name: BackendAzureStorageAccountResourceGroupName
    type: string
    default: ''
    displayName: 'Azure resource group name for backend where the state is stored'

  # terraform plan parameters

  - name: AzureSubscriptionServiceConnection
    type: string
    default: ''
    displayName: 'Azure service connection for the azdo environment'

  - name: TerraformEnvironmentVariableMappings # not used yet
    type: object
    default: { }
    displayName: 'Mappings for terraform variables'

  - name: TerraformVariableFiles # not used yet
    type: object
    default: { }
    displayName: ''

  - name: VerificationMode # not used yet
    type: string
    default: VerifyOnDestroy
    displayName: 'How verification step should trigger: verify on destruction changes; verify on any changes; or do not verify at all'
    values:
      - VerifyOnDestroy
      - VerifyOnAny
      - VerifyDisabled

jobs:
  - deployment: ${{ parameters.JobName }}
    displayName: 'Terraform Plan'
    environment: ${{ parameters.AzDOEnvironmentName }}
    workspace:
      clean: all
    variables:
      - name: TerraformWorkingDirectory
        value: $(Pipeline.Workspace)/${{ parameters.TerraformArtifactName }}
      - ${{ each JobVariableMapping in parameters.JobVariableMappings }}:
          - ${{ if or(eq(JobVariableMapping.Key, 'group'), eq(JobVariableMapping.Key, 'template')) }}:
              - ${{ JobVariableMapping.Key }}: ${{ JobVariableMapping.Value }}
          - ${{ else }}:
              - name: ${{ JobVariableMapping.Key }}
                value: ${{ JobVariableMapping.Value }}
    strategy:
      runOnce:
        deploy:
          steps:
            - template: ../tasks/download_pipeline_artifact.yml
              parameters:
                TerraformArtifactName: ${{ parameters.TerraformArtifactName }}
                TargetPath: $(Pipeline.Workspace)

            - template: ../tasks/terraform_installer.yml
              parameters:
                TerraformVersion: ${{ parameters.TerraformVersion }}

            - template: ../tasks/terraform.yml
              parameters:
                Command: init
                BackendAzureServiceConnection: ${{ parameters.BackendAzureServiceConnection }}
                BackendAzureStorageAccountResourceGroupName: ${{ parameters.BackendAzureStorageAccountResourceGroupName }}
                BackendAzureStorageAccountName: ${{ parameters.BackendAzureStorageAccountName }}
                BackendAzureContainerName: ${{ parameters.BackendAzureContainerName }}
                BackendAzureBlobName: ${{ parameters.BackendAzureBlobName }}
                WorkingDirectory: $(TerraformWorkingDirectory)

            # Terraform Validate
            - template: ../tasks/terraform.yml
              parameters:
                Command: validate
                WorkingDirectory: $(TerraformWorkingDirectory)

            # Terraform Plan
            - template: ../tasks/terraform.yml
              parameters:
                Command: plan
                EnvironmentAzureServiceConnection: ${{ parameters.AzureSubscriptionServiceConnection }}
                WorkingDirectory: $(TerraformWorkingDirectory)
