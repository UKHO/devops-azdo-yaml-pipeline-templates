# Terraform Task Template
# 
# Wraps: TerraformTask@5 (Azure DevOps Terraform extension)
# Purpose: Standardized wrapper for Terraform operations with Azure focus
#
# Usage Examples:
#   - template: ../tasks/terraform.yml
#     parameters:
#       Command: 'init'
#       DisableBackend: true
#       WorkingDirectory: '$(Build.SourcesDirectory)/terraform'
#
#   - template: ../tasks/terraform.yml  
#     parameters:
#       Command: 'plan'
#       CommandOptions: '-out=tfplan'
#       EnvironmentAzureServiceConnection: 'Azure-ServiceConnection'
#
#   - template: ../tasks/terraform.yml
#     parameters:
#       Command: 'apply' 
#       CommandOptions: 'tfplan'
#       EnvironmentAzureServiceConnection: 'Azure-ServiceConnection'
#
# Known Issues:
# - Only Azure (azurerm) provider is implemented as the organization primarily uses Azure
# - The init command doesn't work with '-backend=false' flag using the TerraformTask@5,
#   therefore when DisableBackend=true, a script task is used instead of TerraformTask@5
# - Some advanced azurerm parameters are excluded for simplicity:
#   backendAzureRmOverrideSubscriptionID, backendAzureRmUseIdTokenGeneration,
#   backendAzureRmUseCliFlagsForAuthentication, environmentAzureRmOverrideSubscriptionID,
#   environmentAzureRmUseIdTokenGeneration

parameters:
  - name: Command
    type: string
    displayName: 'Terraform command to execute'
    values:
      - init
      - validate
      - show
      - plan
      - apply
      - output
      - destroy
      - custom

  - name: WorkingDirectory
    type: string
    displayName: 'Working directory for Terraform files'
    default: '$(Pipeline.Workspace)'

  # Command Options
  - name: CommandOptions
    type: string
    displayName: 'Additional command arguments'
    default: ''
    # Examples:
    # - Plan: '-out tfplan'
    # - Apply: 'tfplan' or '-auto-approve'
    # - Destroy: '-auto-approve'

  - name: CustomCommand
    type: string
    displayName: 'Custom Terraform command (when command = custom)'
    default: ''
    # Examples: 'workspace list', 'state list', 'providers'

  # Output Configuration (for show/output commands)
  - name: OutputTo
    type: string
    displayName: 'Output destination for show/output commands'
    default: 'console'
    values:
      - console
      - file

  - name: OutputFileName
    type: string
    displayName: 'Output file name (when OutputTo = file)'
    default: ''

  - name: OutputFormat
    type: string
    displayName: 'Output format for show command'
    default: 'default'
    values:
      - default
      - json

  # Azure Backend Configuration (for init command)
  - name: BackendAzureServiceConnection
    type: string
    displayName: 'Azure service connection for backend'
    default: ''

  - name: BackendAzureStorageAccountName
    type: string
    displayName: 'Azure storage account name for backend'
    default: ''

  - name: BackendAzureContainerName
    type: string
    displayName: 'Azure storage container name for backend'
    default: ''

  - name: BackendAzureBlobName
    type: string
    displayName: 'Azure storage blob name for state file'
    default: ''

  - name: BackendAzureStorageAccountResourceGroupName
    type: string
    displayName: 'Azure resource group name for backend'
    default: ''

  - name: DisableBackend
    type: boolean
    displayName: 'Disable the backend configuration when executing init command'
    default: false

  # Provider Environment Configuration (for plan/apply/destroy commands)
  - name: EnvironmentAzureServiceConnection
    type: string
    displayName: 'Azure service connection for providers'
    default: ''

steps:
  - ${{ if and(eq(parameters.Command, 'init'), eq(parameters.DisableBackend, true)) }}:
      - script: 'terraform init -backend=false'
        displayName: 'Terraform ${{ parameters.Command }}'
        name: TerraformTask_Init
        workingDirectory: ${{ parameters.WorkingDirectory }}

  - ${{ else }}:
      - task: TerraformTask@5
        displayName: 'Terraform ${{ parameters.Command }}'
        name: TerraformTask_${{ parameters.Command }}
        inputs:
          # Core Configuration
          provider: 'azurerm'
          command: '${{ parameters.Command }}'
          ${{ if ne(parameters.WorkingDirectory, '') }}:
            workingDirectory: '${{ parameters.WorkingDirectory }}'

          # Command Options
          ${{ if ne(parameters.CommandOptions, '') }}:
            commandOptions: '${{ parameters.CommandOptions }}'

          ${{ if and(eq(parameters.Command, 'custom'), ne(parameters.CustomCommand, '')) }}:
            customCommand: '${{ parameters.CustomCommand }}'

          # Output Configuration (show/output commands)
          ${{ if and(or(eq(parameters.Command, 'show'), eq(parameters.Command, 'output')), ne(parameters.OutputTo, 'console')) }}:
            outputTo: '${{ parameters.OutputTo }}'

          ${{ if and(eq(parameters.OutputTo, 'file'), ne(parameters.OutputFileName, '')) }}:
            fileName: '${{ parameters.OutputFileName }}'

          ${{ if and(eq(parameters.Command, 'show'), ne(parameters.OutputFormat, 'default')) }}:
            outputFormat: '${{ parameters.OutputFormat }}'

          # Azure Backend Configuration (init command)
          ${{ if eq(parameters.Command, 'init') }}:
            ${{ if ne(parameters.BackendAzureServiceConnection, '') }}:
              backendServiceArm: '${{ parameters.BackendAzureServiceConnection }}'

            ${{ if ne(parameters.BackendAzureStorageAccountName, '') }}:
              backendAzureRmStorageAccountName: '${{ parameters.BackendAzureStorageAccountName }}'

            ${{ if ne(parameters.BackendAzureContainerName, '') }}:
              backendAzureRmContainerName: '${{ parameters.BackendAzureContainerName }}'

            ${{ if ne(parameters.BackendAzureBlobName, '') }}:
              backendAzureRmKey: '${{ parameters.BackendAzureBlobName }}'

            ${{ if ne(parameters.BackendAzureStorageAccountResourceGroupName, '') }}:
              backendAzureRmResourceGroupName: '${{ parameters.BackendAzureStorageAccountResourceGroupName }}'

          # Azure Provider Configuration (plan/apply/destroy commands)
          ${{ if or(eq(parameters.Command, 'plan'), eq(parameters.Command, 'apply'), eq(parameters.Command, 'destroy')) }}:
            ${{ if ne(parameters.EnvironmentAzureServiceConnection, '') }}:
              environmentServiceNameAzureRM: '${{ parameters.EnvironmentAzureServiceConnection }}'
