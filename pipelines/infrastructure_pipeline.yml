parameters:
  - name: PipelinePool
    type: string
    default: 'Mare Nectaris'
    displayName: 'The pool that the pipeline will run from the highest level'

  - name: RelativePathToTerraformFiles
    type: string
    default: ''
    displayName: 'Target Path to Terraform files (.tf,.tfvars) that require publishing as artifact'

  - name: TerraformVersion
    type: string
    default: 'latest'
    displayName: 'Version of Terraform CLI tool to use with the terraform files'

  - name: TerraformBuildInjectionSteps
    type: stepList
    default: []
    displayName: 'Steps to be carried out before the terraform is init, validated, and packaged'

variables:
  - name: PipelinePool
    value: ${{ parameters.PipelinePool }}

stages:
  - template: ../stages/terraform_build.yml
    parameters:
      RelativePathToTerraformFiles: ${{ parameters.RelativePathToTerraformFiles }}
      TerraformVersion: ${{ parameters.TerraformVersion }}
      TerraformBuildInjectionSteps: ${{ parameters.TerraformBuildInjectionSteps }}

  - template: ../stages/terraform_deploy.yml
    parameters:
      DependsOn:
        - Build
      Condition: succeeded('Build')
      AzureSubscriptionServiceConnection: Pipeline-CloudDisco # todo
      AzDOEnvironmentName: Discovery # todo
      TerraformVersion: ${{ parameters.TerraformVersion }}
      # TerraformArtifactName: # todo
      # TerraformJobVariableMappings: # todo
      BackendAzureServiceConnection: Pipeline-CloudDisco # todo
      BackendAzureStorageAccountResourceGroupName: m-devopschapter-rg # todo
      BackendAzureStorageAccountName: ukhodoctfstatesa # todo
      BackendAzureContainerName: tfstate# todo
      BackendAzureBlobName: compiletest.tfstate # todo
      KeyVaultServiceConnection: Pipeline-CloudDisco # todo
      KeyVaultName: testkeyvault # todo
      KeyVaultSecretsFilter: '*' # todo
      RunPlanOnly: true # todo
      # TerraformVariableMappings: # todo
      # TerraformOutputVariables: # todo
      # TerraformVariableFiles: # todo
